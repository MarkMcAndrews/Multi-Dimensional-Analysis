#################### Step 1: Chunking and cleaning text in R.  This R code chunks a longer text into smaller parts based on user-identified separators (e.g. the names of the books of the Bible) and cleans it in preparation for POS tagging by the Stanford Tagger.

bible <- scan(choose.files(), what="char", quote=NULL) # opens a dialogue box; navigate and select Bible text file to load it into R
bible.collapsed <- paste(bible,collapse=" ") # collapses Bible text into one character string
sep.books <- c("^.*Genesis 1|Exodus 1|Leviticus 1|Numbers 1|Deuteronomy 1|Joshua 1|Judges 1|Ruth 1|1st Samuel 1|2nd Samuel 1|1st Kings 1|2nd Kings 1|1st Chronicles 1|2nd Chronicles 1|Ezra 1|Nehemiah 1|Esther 1|Job 1|Psalms P|Proverbs 1|Ecclesiastes 1|Song of Solomon 1|Isaiah 1|Jeremiah 1|Lamentations 1|Ezekiel 1|Daniel 1|Hosea 1|Joel 1|Amos 1|Obadiah 1|Jonah 1|Micah 1|Nahum 1|Habakkuk 1|Zephaniah 1|Haggai 1|Zechariah 1|Malachi 1|Matthew 1|Mark 1|Luke 1|John 1|Acts 1|Romans 1|1st Corinthians 1|2nd Corinthians 1|Galatians 1|Ephesians 1|Philippians 1|Colossians 1|1st Thessalonians 1|2nd Thessalonians 1|1st Timothy 1|2nd Timothy 1|Titus 1|Philemon 1|Hebrews 1|James 1|1st Peter 1|2nd Peter 1|1st John 1|2nd John 1|3rd John 1|Jude 1|Revelation 1") # these separators are tailored to a specific .txt copy of the Protestant Bible; can be modified to break up another longer text
books <- unlist(strsplit(bible.collapsed, sep.books)) # splits Bible text at book titles
books <- books[books != ""] # removes any empty elements 
books.cleaned <- gsub("\\d", "", books) # removes digits to allow for better POS identification
chapters <- c("1_Genesis","10_Exodus","11_Leviticus","12_Numbers","13_Deuteronomy","14_Joshua","15_Judges","16_Ruth","17_1st_Samuel","18_2nd_Samuel","19_1st_Kings","2_2nd_Kings","20_1st_Chronicles","21_2nd_Chronicles","22_Ezra","23_Nehemiah","24_Esther","25_Job","26_Psalms","27_Proverbs","28_Ecclesiastes","29_Song_of_Solomon","3_Isaiah","30_Jeremiah","31_Lamentations","32_Ezekiel","33_Daniel","34_Hosea","35_Joel","36_Amos","37_Obadiah","38_Jonah","39_Micah","4_Nahum","40_Habakkuk","41_Zephaniah","42_Haggai","43_Zechariah","44_Malachi","45_Matthew","46_Mark","47_Luke","48_John","49_Acts","5_Romans","50_1st_Corinthians","51_2nd_Corinthians","52_Galatians","53_Ephesians","54_Philippians","55_Colossians","56_1st_Thessalonians","57_2nd_Thessalonians","58_1st_Timothy","59_2nd_Timothy","6_Titus","60_Philemon","61_Hebrews","62_James","63_1st_Peter","64_2nd_Peter","65_1st_John","66_2nd_John","7_3rd_John","8_Jude","9_Revelation") # these are the names of the new .txt files for the Bible books; can be modified based on any collection of texts
for (i in 1:66) {
  write(books.cleaned[i], paste(chapters[i], ".txt", sep=""))
} # writes each book into a separate .txt file in the working directory; files named "1_Genesis", "10_Exodus", etc (numbering is not straightforward so as to match R's internal numbering system)

#################### End Step 1.  If your texts are already chunked (e.g. chunks of newspaper writing, fiction, and spoken English) Step 1 is unnecessary.  However, you should name your files using the R numbering system (e.g. "1_newspaper.txt") - that will be important later.

#################### Step 2: POS tagging with the Stanford Tagger. This Unix (Git Bash) command line code tags all the words in your collection of texts.  The Stanford Tagger (Kristina Toutanova, Dan Klein, Christopher Manning, and Yoram Singer. 2003. Feature-Rich Part-of-Speech Tagging with a Cyclic Dependency Network. In Proceedings of HLT-NAACL 2003, pp. 252-259.) can be downloaded from http://nlp.stanford.edu/software/tagger.shtml#Download .

for file in *txt; do java -mx800m -classpath stanford-postagger.jar   edu.stanford.nlp.tagger.maxent.MaxentTagger -model models/english-bidirectional-distsim.tagger -textFile $file  >  ./Bible_books_POS/$file; done # assumes (Bible) text files and Stanford Tagger are in the working directory; user must create a folder called e.g. "Bible_books_POS" within the working directory where the new files will be written 

#################### End Step 2.

#################### Step 3: Factor analysis in R. This R code perfoms a factor analysis on the POS tags in a collections of texts and outputs 1)a summary of the analysis (call object FA in R), and 2) barplots of factor scores for each factor.  It uses 11 POS tags and finds 3 factors, and must be modified for other specifications. 

books.POS <- lapply(list.files(full=TRUE),  scan, what="char", quote=NULL) # loads tagged (Bible) texts into R; working directory must contain tagged .txt files (output of the POStagger)
books.POS.cleaned <- list()  #  creates empty list
for (i in 1:length(books.POS)) {
	books.POS.cleaned[[i]] <- unlist(strsplit(books.POS[[i]], "^[aA-zZ]*\\_")) # removes words, leaves tags
 	books.POS.cleaned[[i]] <- gsub("[[:punct:]]", "", books.POS.cleaned[[i]]) # removes punctuation (this causes the confation of the POS tags "PRP" and "PRP$")
 	books.POS.cleaned[[i]] <- books.POS.cleaned[[i]][books.POS.cleaned[[i]] != ""] # removes empty elements
 }

replicate(11, list())->ok # creates a list of 11 lists (one for each of 11 POS tags)

for(i in 1:length(books.POS)) {
  ok[[1]][[i]] <- sum(books.POS.cleaned[[i]]== "PRP")/length(books.POS.cleaned[[i]])*100 # counts frequency of a POS tag (e.g. "PRP") in each (Bible) text divided by total number of words to give relative frequency and stores result in a list.  
  ok[[2]][[i]] <- (sum(books.POS.cleaned[[i]]== "NN")+sum(books.POS.cleaned[[i]]== "NNS"))/length(books.POS.cleaned[[i]])*100 # this conflates "NN" and "NNS" tags 
  ok[[3]][[i]] <- sum(books.POS.cleaned[[i]]== "CC")/length(books.POS.cleaned[[i]])*100
  ok[[4]][[i]] <- sum(books.POS.cleaned[[i]]== "DT")/length(books.POS.cleaned[[i]])*100
  ok[[5]][[i]] <- sum(books.POS.cleaned[[i]]== "JJ")/length(books.POS.cleaned[[i]])*100
  ok[[6]][[i]] <- sum(books.POS.cleaned[[i]]== "MD")/length(books.POS.cleaned[[i]])*100
  ok[[7]][[i]] <- (sum(books.POS.cleaned[[i]]== "NNP")+sum(books.POS.cleaned[[i]]== "NNPS"))/length(books.POS.cleaned[[i]])*100 # this conflates "NNP" and "NNPS" tags 
  ok[[8]][[i]] <- sum(books.POS.cleaned[[i]]== "RB")/length(books.POS.cleaned[[i]])*100
  ok[[9]][[i]] <- sum(books.POS.cleaned[[i]]== "VB")/length(books.POS.cleaned[[i]])*100
  ok[[10]][[i]] <- sum(books.POS.cleaned[[i]]== "VBD")/length(books.POS.cleaned[[i]])*100
  ok[[11]][[i]] <- sum(books.POS.cleaned[[i]]== "VBP")/length(books.POS.cleaned[[i]])*100 
} 
unlist(ok[[1]])->PRP # creates a numeric vector with 66 values; each value is the relative frequency of a POS tag in each Bible book
unlist(ok[[2]])->NNC # all common nouns (singular and plural)
unlist(ok[[3]])->CC
unlist(ok[[4]])->DT
unlist(ok[[5]])->JJ
unlist(ok[[6]])->MD
unlist(ok[[7]])->NNP # all proper nouns (singular and plural)
unlist(ok[[8]])->RB
unlist(ok[[9]])->VB
unlist(ok[[10]])->VBD
unlist(ok[[11]])->VBP

df <- data.frame(PRP, NNC, CC, DT, JJ, MD, NNP, RB, VB, VBD, VBP) # creates data frame where rows are (Bible) texts (1=Genesis, 66=Revelation); columns are "PRP", "NNC", etc

FA <- factanal(df, 3) # performs a factor analysis of the data frame and returns 3 factors (must be modified if more factors are desired); object FA is a summary of the analysis 
loadings<-FA[[2]][,1:3] # creates factor analysis loadings object

Factor1<- character() # creates empty vectors for individual factors; must be modified if more than 3 factors are desired
Factor2<- character()
Factor3<- character()
for (i in 1:length(loadings[,1])) {
    if (names(loadings[i,][which.max(abs(loadings[i,]))])=="Factor1"&abs(loadings[i,][which.max(abs(loadings[i,]))])>0.3) {
      Factor1[i]<-names(loadings[,1])[i]
      }
   else if (names(loadings[i,][which.max(abs(loadings[i,]))])=="Factor2"&abs(loadings[i,][which.max(abs(loadings[i,]))])>0.3) {
      Factor2[i]<-names(loadings[,1])[i]
      }
  
 else if (names(loadings[i,][which.max(abs(loadings[i,]))])=="Factor3"&abs(loadings[i,][which.max(abs(loadings[i,]))])>0.3) {
      Factor3[i]<-names(loadings[,1])[i]
      }
  } # prints name of POS tag into highest loading factor (loading must be greater than 0.3)
Factor1<-Factor1[!is.na(Factor1)] # removes NAs from factors; note that it is not yet indicated if they are positive or negative loading
Factor2<-Factor2[!is.na(Factor2)]
Factor3<-Factor3[!is.na(Factor3)]

standardized.scores <- scale(df) # in data frame, replaces relative frequencies with standardized frequencies (i.e. Z-scores)

individual.scores1 <- list ()
for (i in 1:length(Factor1)){
  if (loadings[Factor1[i],][which.max(abs(loadings[Factor1[i],]))]<0) {
    individual.scores1[[i]]<--standardized.scores[,Factor1[i]]
  }
  else {
    individual.scores1[[i]]<-standardized.scores[,Factor1[i]]
     }
    } # loads Factor1 scores 
factor.scores1 <- Reduce("+",individual.scores1) # calculates Factor1 scores

individual.scores2 <- list ()
for (i in 1:length(Factor2)){
  if (loadings[Factor2[i],][which.max(abs(loadings[Factor2[i],]))]<0) {
    individual.scores2[[i]]<--standardized.scores[,Factor2[i]]
  }
  else {
    individual.scores2[[i]]<-standardized.scores[,Factor2[i]]
     }
    } # loads Factor2 scores 
factor.scores2 <- Reduce("+",individual.scores2) # calculates Factor2 scores

individual.scores3 <- list ()
for (i in 1:length(Factor3)){
  if (loadings[Factor3[i],][which.max(abs(loadings[Factor3[i],]))]<0) {
    individual.scores3[[i]]<--standardized.scores[,Factor3[i]]
  }
  else {
    individual.scores3[[i]]<-standardized.scores[,Factor3[i]]
     }
    } # loads Factor3 scores 
factor.scores3 <- Reduce("+",individual.scores3) # calculates Factor3 scores

texts<-c("Genesis","Exodus","Leviticus","Numbers","Deuteronomy","Joshua","Judges","Ruth","1st Samuel","2nd Samuel","1st Kings","2nd Kings","1st Chronicles","2nd Chronicles","Ezra","Nehemiah","Esther","Job","Psalms","Proverbs","Ecclesiastes","Song of Solomon","Isaiah","Jeremiah","Lamentations","Ezekiel","Daniel","Hosea","Joel","Amos","Obadiah","Jonah","Micah","Nahum","Habakkuk","Zephaniah","Haggai","Zechariah","Malachi","Matthew","Mark","Luke","John","Acts","Romans","1st Corinthians","2nd Corinthians","Galatians","Ephesians","Philippians","Colossians","1st Thessalonians","2nd Thessalonians","1st Timothy","2nd Timothy","Titus","Philemon","Hebrews","James","1st Peter","2nd Peter","1st John","2nd John","3rd John","Jude","Revelation")
names(factor.scores1)<-texts # names the factor scores by text
names(factor.scores2)<-texts
names(factor.scores3)<-texts

factor.names1 <- list()
for (i in 1:length(Factor1)){
  if (loadings[Factor1[i],][which.max(abs(loadings[Factor1[i],]))]<0) {
    factor.names1[[i]]<- paste0("-", Factor1[[i]])
  }
  else {
    factor.names1[[i]]<- paste0("+", Factor1[[i]])
  }
} 
temp1 <- paste(factor.names1, collapse="")
plot.name1 <- paste("Factor 1: ", temp1, collapse="") # creates a title for the factor plot

factor.names2 <- list()
for (i in 1:length(Factor2)){
  if (loadings[Factor2[i],][which.max(abs(loadings[Factor2[i],]))]<0) {
    factor.names2[[i]]<- paste0("-", Factor2[[i]])
  }
  else {
    factor.names2[[i]]<- paste0("+", Factor2[[i]])
  }
} 
temp2 <- paste(factor.names2, collapse="")
plot.name2 <- paste("Factor 2: ", temp2, collapse="")

factor.names3 <- list()
for (i in 1:length(Factor3)){
  if (loadings[Factor3[i],][which.max(abs(loadings[Factor3[i],]))]<0) {
    factor.names3[[i]]<- paste0("-", Factor3[[i]])
  }
  else {
    factor.names3[[i]]<- paste0("+", Factor3[[i]])
  }
} 
temp3 <- paste(factor.names3, collapse="")
plot.name3 <- paste("Factor 3: ", temp3, collapse="")

pdf("Factor1.pdf", width = 8, height = 15 )
mar.default <- c(5,4,4,2) + 0.1
par(mar = mar.default + c(0, 6, 0, 1)) 
barplot(sort(factor.scores1), main=plot.name1, xlab="Factor scores", las=1, horiz=TRUE)
dev.off() # plots the factor with factor scores for each text; saved in working directory

pdf("Factor2.pdf", width = 8, height = 15 )
mar.default <- c(5,4,4,2) + 0.1
par(mar = mar.default + c(0, 6, 0, 1)) 
barplot(sort(factor.scores2), main=plot.name2, xlab="Factor scores", las=1, horiz=TRUE, xlim=c(-4,6))
dev.off()

pdf("Factor3.pdf", width = 8, height = 15 )
mar.default <- c(5,4,4,2) + 0.1
par(mar = mar.default + c(0, 6, 0, 4)) 
barplot(sort(factor.scores3), main=plot.name3, xlab="Factor scores", las=1, horiz=TRUE, xlim=c(-6,4))
dev.off()